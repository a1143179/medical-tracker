name: Test and Deploy

on:
  pull_request:
    branches: [ main, working ]

# NOTE: To enforce PRs for main, set branch protection rules in GitHub settings to block direct pushes to main.

env:
  NODE_VERSION: '20.17.0'
  DOTNET_VERSION: '9.0.x'

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Start application
      run: npm start &
      env:
        CI: true

    - name: Wait for application to start
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Cypress tests (debug mode and headless mode)
      run: cross-env DEBUG=cypress:* npx cypress run --headless
      working-directory: ./frontend
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Ensure TestResults directory exists
      run: mkdir -p TestResults

    - name: Test with xUnit
      run: dotnet test --no-build --verbosity normal --logger "console;verbosity=detailed" --logger "trx;LogFileName=$(pwd)/test-results.trx"
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ConnectionStrings__DefaultConnection: "Data Source=:memory:"

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medicaltracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      run: npm ci && npm run build
      working-directory: ./frontend

    - name: Copy frontend build to backend wwwroot
      run: |
        if exist backend\wwwroot rmdir /s /q backend\wwwroot
        mkdir backend\wwwroot
        xcopy /s /e /y frontend\build\* backend\wwwroot\

    - name: Build backend
      run: dotnet restore && dotnet build --no-restore
      working-directory: ./backend

    - name: Run database migrations
      working-directory: ./backend
      run: dotnet ef database update
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=medicaltracker_test;Username=postgres;Password=postgres"

    - name: Start backend
      run: dotnet run --no-build --urls http://localhost:55555 &
      working-directory: ./backend
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ASPNETCORE_URLS: http://localhost:55555
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

    - name: Wait for backend
      run: npx wait-on http://localhost:55555/api/health

    - name: Run integration tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./frontend
        browser: chrome
        record: false
        config: baseUrl=http://localhost:55555
        spec: cypress/e2e/smoke-tests.cy.js
        wait-on: 'http://localhost:55555,http://localhost:55555/api/health'
        wait-on-timeout: 120

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/working'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build frontend
      working-directory: ./frontend
      run: npm ci && npm run build:production

    - name: Build backend
      working-directory: ./backend
      run: dotnet restore && dotnet publish -c Release -o ./publish

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r frontend/build/* deployment/
        cp -r backend/publish/* deployment/
        cp docker-compose.yml deployment/
        cp Dockerfile deployment/

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment/

    - name: Deploy to Azure (if main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production..."
        # Add your Azure deployment commands here
        # az webapp deployment source config-zip --resource-group your-rg --name your-app --src deployment.zip

    - name: Deploy to Staging (if working branch)
      if: github.ref == 'refs/heads/working'
      run: |
        echo "Deploying to staging..."
        # Add your staging deployment commands here

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Start application
      working-directory: ./frontend
      run: npm start &
      env:
        CI: true

    - name: Wait for application to start
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:55555; do sleep 2; done'

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/dashboard
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: './frontend/.lighthouserc.json' 