name: Deploy Medical Tracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, working ]

env:
  AZURE_WEBAPP_NAME: medicaltracker
  RESOURCE_GROUP: ResourceGroup1
  GHCR_IMAGE: ghcr.io/${{ github.repository }}/medicaltracker
  NODE_VERSION: '20.17.0'
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('backend/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Restore and build backend
      run: |
        cd backend
        dotnet restore
        dotnet build --no-restore -c Release
    - name: Publish backend
      run: |
        cd backend
        dotnet publish -c Release -o ../backend-publish
    - name: Build and run Docker image for integration tests
      run: |
        docker build -t medicaltracker-test:latest .
        docker run -d --name medicaltracker-test -p 55555:8080 \
          -e ASPNETCORE_ENVIRONMENT=Test \
          -e ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres" \
          medicaltracker-test:latest
    - name: Wait for backend
      run: npx wait-on http://localhost:55555/health
      working-directory: ./frontend
    - name: Debug testlogin route
      run: |
        curl -i http://localhost:55555/api/auth/testlogin || true
    - name: Run Cypress E2E (headless mode)
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./frontend
        start: ''
        wait-on: 'http://localhost:55555'
        wait-on-timeout: 120
        browser: chrome
        headless: true
        config: baseUrl=http://localhost:55555
    - name: Upload Cypress screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
    - name: Upload Cypress videos
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-videos
        path: frontend/cypress/videos
    - name: Show host root directory (pwd)
      run: pwd
    - name: List host root directory
      run: ls -l
    - name: Show backend directory (pwd)
      run: pwd
    - name: List backend directory
      run: ls -l backend || true
    - name: List backend logs directory (debug)
      run: docker cp medicaltracker-test:/app/logs - | tar -tvf - || true
    - name: List container /app/logs directory
      run: docker exec medicaltracker-test ls -l /app/logs || true
    - name: Copy backend logs from container
      run: docker cp medicaltracker-test:/app/logs ./logs || true
    - name: Show logs directory after copy (pwd)
      run: pwd
    - name: List logs directory after copy
      run: ls -l logs || true
    - name: Upload backend log for Cypress debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-log
        path: logs/

  build-docker-container:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT_TOKEN }}
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.GHCR_IMAGE }}:${{ github.sha }} -t ${{ env.GHCR_IMAGE }}:latest -t ${{ env.GHCR_IMAGE }}:${{ github.run_number }} .
        docker push ${{ env.GHCR_IMAGE }}:${{ github.sha }}
        docker push ${{ env.GHCR_IMAGE }}:latest
        docker push ${{ env.GHCR_IMAGE }}:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-container
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to Azure Web App for Containers
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.GHCR_IMAGE }}:${{ github.run_number }} 