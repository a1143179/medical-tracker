name: Deploy Medical Tracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, working ]

env:
  AZURE_WEBAPP_NAME: medicaltracker
  RESOURCE_GROUP: ResourceGroup1
  GHCR_IMAGE: ghcr.io/${{ github.repository }}/medicaltracker
  NODE_VERSION: '20.17.0'
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend

    - name: Copy frontend build to backend wwwroot
      run: |
        mkdir -p backend/wwwroot
        rm -rf backend/wwwroot/*
        cp -r frontend/build/* backend/wwwroot/

    - name: Publish backend
      run: |
        cd backend
        dotnet publish -c Release -o ../backend-publish

    - name: List workspace contents before Docker build
      run: ls -l

    - name: Build Docker image
      run: |
        docker build -t medicaltracker-e2e:latest .

    - name: Start backend container
      run: |
        docker run -d --name medicaltracker-e2e -p 55555:55555 medicaltracker-e2e:latest

    - name: Wait for backend /health
      timeout-minutes: 1
      run: npx wait-on http://localhost:55555/health

    - name: Run Cypress E2E
      run: npx cypress run --config baseUrl=http://localhost:55555
      working-directory: ./frontend
    - name: Upload Cypress screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
    - name: Upload Cypress videos
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-videos
        path: frontend/cypress/videos
    - name: Show host root directory (pwd)
      if: always()
      run: pwd
    - name: List host root directory
      if: always()
      run: ls -l
    - name: Show backend directory (pwd)
      if: always()
      run: pwd
    - name: List backend directory
      if: always()
      run: ls -l backend || true
    - name: List backend logs directory (debug)
      if: always()
      run: docker cp medicaltracker-test:/app/logs - | tar -tvf - || true
    - name: List container /app/logs directory
      if: always()
      run: docker exec medicaltracker-test ls -l /app/logs || true
    - name: Copy backend logs from container
      if: always()
      run: docker cp medicaltracker-test:/app/logs ./logs || true
    - name: Show logs directory after copy (pwd)
      if: always()
      run: pwd
    - name: List logs directory after copy
      if: always()
      run: ls -l logs || true
    - name: Upload backend log for Cypress debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-log
        path: logs/

  build-docker-container:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT_TOKEN }}
    - name: Build and push Docker image
      run: |
        docker build --no-cache -t ${{ env.GHCR_IMAGE }}:${{ github.sha }} -t ${{ env.GHCR_IMAGE }}:latest -t ${{ env.GHCR_IMAGE }}:${{ github.run_number }} .
        docker push ${{ env.GHCR_IMAGE }}:${{ github.sha }}
        docker push ${{ env.GHCR_IMAGE }}:latest
        docker push ${{ env.GHCR_IMAGE }}:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-container
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to Azure Web App for Containers
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.GHCR_IMAGE }}:${{ github.run_number }} 