name: Deploy Medical Tracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, working ]

env:
  AZURE_WEBAPP_NAME: medicaltracker
  RESOURCE_GROUP: ResourceGroup1
  GHCR_IMAGE: ghcr.io/${{ github.repository }}/medicaltracker
  NODE_VERSION: '20.17.0'
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build frontend (production)
      run: npm run build:production
      working-directory: ./frontend
    - name: Copy frontend build to backend wwwroot
      run: |
        rm -rf backend/wwwroot
        mkdir -p backend/wwwroot
        cp -r frontend/build/* backend/wwwroot/
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore and build backend
      run: |
        cd backend
        dotnet restore
        dotnet build --no-restore
    - name: Run backend xUnit tests
      run: |
        cd xunit
        dotnet test --no-build --verbosity normal
    - name: Publish backend
      run: |
        cd backend
        dotnet publish -c Release -o ../backend-publish
    - name: Copy frontend build to backend-publish/wwwroot
      run: |
        mkdir -p backend-publish/wwwroot
        cp -r frontend/build/* backend-publish/wwwroot/
    - name: Start backend for integration tests
      run: |
        dotnet backend-publish/backend.dll --urls http://localhost:55555 &
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ASPNETCORE_URLS: http://localhost:55555
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"
    - name: Wait for backend
      run: npx wait-on http://localhost:55555/health
      working-directory: ./frontend
    - name: Run Cypress E2E (debug mode and headless mode)
      run: DEBUG=cypress:* npx cypress run --headless --config baseUrl=http://localhost:55555
      working-directory: ./frontend
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"

  build-docker-container:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    - name: Build frontend (production)
      run: npm ci && npm run build:production
      working-directory: ./frontend
    - name: Copy frontend build to backend wwwroot
      run: |
        rm -rf backend/wwwroot
        mkdir -p backend/wwwroot
        cp -r frontend/build/* backend/wwwroot/
    - name: Publish backend
      run: |
        cd backend
        dotnet restore
        dotnet publish -c Release -o ../backend-publish
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT_TOKEN }}
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.GHCR_IMAGE }}:${{ github.sha }} -t ${{ env.GHCR_IMAGE }}:latest -t ${{ env.GHCR_IMAGE }}:${{ github.run_number }} .
        docker push ${{ env.GHCR_IMAGE }}:${{ github.sha }}
        docker push ${{ env.GHCR_IMAGE }}:latest
        docker push ${{ env.GHCR_IMAGE }}:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-container
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to Azure Web App for Containers
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.GHCR_IMAGE }}:${{ github.run_number }} 