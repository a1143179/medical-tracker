name: Deploy Medical Tracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, working ]

env:
  AZURE_WEBAPP_NAME: medicaltracker
  RESOURCE_GROUP: ResourceGroup1
  GHCR_IMAGE: ghcr.io/${{ github.repository }}/medicaltracker
  NODE_VERSION: '20.17.0'
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend

    - name: Copy frontend build to backend wwwroot
      run: |
        mkdir -p backend/wwwroot
        rm -rf backend/wwwroot/*
        cp -r frontend/build/* backend/wwwroot/

    - name: Setup .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Publish backend
      run: |
        cd backend
        dotnet publish -c Release -o ../backend-publish

    - name: Build Docker image
      run: |
        docker build -t ${{ env.GHCR_IMAGE }}:${{ github.sha }} -t ${{ env.GHCR_IMAGE }}:latest -t ${{ env.GHCR_IMAGE }}:${{ github.run_number }} .

    - name: Start backend container
      run: |
        docker run -d --name medicaltracker-e2e \
          --network ${{ job.container.network }} \
          -e ASPNETCORE_ENVIRONMENT=Test \
          -e ConnectionStrings__DefaultConnection="Host=postgres;Port=5432;Database=postgres;Username=postgres;Password=password" \
          -p 55555:55555 ${{ env.GHCR_IMAGE }}:${{ github.sha }}

    - name: Wait for backend /api/health
      timeout-minutes: 1
      run: npx wait-on http://localhost:55555/api/health

    - name: Show backend container logs
      if: always()
      run: docker logs medicaltracker-e2e || true

    - name: Run Cypress E2E
      run: npx cypress run --config baseUrl=http://localhost:55555
      working-directory: ./frontend
    - name: Upload Cypress screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
    - name: Upload Cypress videos
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-videos
        path: frontend/cypress/videos
    - name: Upload backend log for Cypress debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-log
        path: backend-publish/logs/

  push-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT_TOKEN }}
    - name: Push Docker image
      run: |
        docker push ${{ env.GHCR_IMAGE }}:${{ github.sha }}
        docker push ${{ env.GHCR_IMAGE }}:latest
        docker push ${{ env.GHCR_IMAGE }}:${{ github.run_number }}

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: push-image
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to Azure Web App for Containers
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.GHCR_IMAGE }}:${{ github.run_number }} 